class App {
    constructor(taskContainer, pageTitle, sidebarContainer, projectContainer) {
        // reference to the task list container
        this.taskContainer = taskContainer;

        // reference to the page title (for filters)
        this.pageTitle = pageTitle;

        // init the task manager and get the task list
        this.taskManager = new TaskManager();
        this.tasks = this.taskManager.all;

        // init the filter functionality
        this.filters = new Filter(sidebarContainer, this.taskManager);

        // init the project functionality
        //this.projects = new Project(projectContainer, this.taskManager);
        
        // 'this' should be the one in this class, not the target element
        this.onFilterSelected = this.onFilterSelected.bind(this);
        // listening for the event generated by filters
        document.addEventListener('filter-selected', this.onFilterSelected);
        
        // set up custom validation callback
        // -> if I insert a time for the deadline, then the date is required
        const timeInput = document.getElementById('form-deadline-time');
        const dateInput = document.getElementById('form-deadline-date');
        timeInput.addEventListener('input', function(){
            if(timeInput.value !== ''){
                // check date
                if(dateInput.value === ''){
                    dateInput.setCustomValidity('Data mancante, per favore, specificala');
                    dateInput.classList.add('invalid');
                }
            } else {
                dateInput.setCustomValidity('');
                dateInput.classList.remove('invalid');
            }
        });
        dateInput.addEventListener('input', function(event){
            if(dateInput.value !== '')
                dateInput.setCustomValidity('');
        });

        // set up form callback
        document.getElementById('add-form').addEventListener('submit', event => {
            event.preventDefault();
            const addForm = document.getElementById('add-form');

            const description = addForm.elements['form-description'].value;

            let project = addForm.elements['form-project'].value;
            if(project === '')
                project = undefined;

            const important = addForm.elements['form-important'].checked;
            const privateTask = addForm.elements['form-private'].checked;
            
            const deadlineDate = addForm.elements['form-deadline-date'].value;
            const deadlineTime = addForm.elements['form-deadline-time'].value;
            
            let deadline = undefined;
            if(deadlineDate !== '' && deadlineTime !== '')
                deadline = deadlineDate + ' ' + deadlineTime;
            else if(deadlineDate !== '')
                deadline = deadlineDate;

            const task = new Task(description, important, privateTask, deadline,project);

            this.taskManager.addTask(task);

            // refresh the user interface
            this.clearTasks();
            this.showTasks();
            
            // create all the projects in the sidebar
            this.projects.createAllProjects();

            //reset the form and close the modal
            addForm.reset();
            document.getElementById('close-modal').click();
        });

        this.projects.createAllProjects();
        this.showTasks();
    }

    /**
     * Custom event handler: receive and show the filtered task list
     * @param {*} event the task list and the title of the page
    */ 
    onFilterSelected(event) {
        // get tasks
        const tasks = event.detail.tasks;
        
        // set the page title
        this.pageTitle.innerText = event.detail.title;
        
        // empty the task list
        this.clearTasks();

        // show all the things!
        this.showTasks(tasks);
    }

    /**
     * Create the <ul></ul> list of tasks
     * 
     * @param {*} tasks the task list to display
     */
    showTasks(tasks=this.tasks){
        for(const task of tasks){
            const taskNode = this.createTaskNode(task);
            this.taskContainer.appendChild(taskNode);
        }
    }

    /**
     * Function to create a single task enclosed in an <li> tag
     * @param {*} task the task object
     */
    createTaskNode(task){
        const li = document.createElement('li');
        li.id = 'task' + task.id;
        li.className = 'list-group-item';
        const innerDiv = document.createElement('div');
        innerDiv.className = 'custom-control custom-checkbox';
        const externalDiv = document.createElement('div');
        externalDiv.className = 'd-flex w-100 justify-content-between';
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'custom-control-input';
        checkbox.id = 'check-t' + task.id;
        innerDiv.appendChild(checkbox);
        
        const descriptionText = document.createElement('label');
        descriptionText.className = 'description custom-control-label';
        descriptionText.htmlFor = 'check-t' + task.id;

        if(task.important) {
            const importantSpan = document.createElement('span');
            importantSpan.className = 'text-danger pr-1';
            importantSpan.innerText = '!!!';
            descriptionText.appendChild(importantSpan);
        }
        descriptionText.innerHTML += task.description;
        
        
        innerDiv.appendChild(descriptionText);
        
        if(task.project){
            const projectText = document.createElement('span');
            projectText.className = 'project badge badge-primary ml-4';
            projectText.innerText = task.project;
            innerDiv.appendChild(projectText);
        }
        externalDiv.appendChild(innerDiv);

        if(task.deadline){
            const dateText = document.createElement('small');
            dateText.className = 'date';
            // print deadline - using the format function of Moment.js
            dateText.innerText = task.deadline.format('dddd, MMMM Do YYYY, h:mm:ss a'); 
            // mark expired tasks - using the isBefore function of Moment.js
            const now = moment();
            if(task.deadline.isBefore(now))
                dateText.classList.add('text-danger');
            
            externalDiv.appendChild(dateText);
        }   
        
        
        if(!task.privateTask){
            innerDiv.insertAdjacentHTML('afterend', `<svg class="bi bi-person-square" width="1.2em" height="1.2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M14 1H2a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V2a1 1 0 00-1-1zM2 0a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2V2a2 2 0 00-2-2H2z" clip-rule="evenodd"/>
                <path fill-rule="evenodd" d="M2 15v-1c0-1 1-4 6-4s6 3 6 4v1H2zm6-6a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"/>
              </svg> `);
        }
            
        li.appendChild(externalDiv);
        return li;
    }

    /**
     * Function to empty the <ul></ul> list of tasks
     */
    clearTasks(){
        this.taskContainer.innerHTML = '';
    }
}